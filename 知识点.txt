单例模式（Singleton?Pattern?单件模式或单元素模式）
单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。
单例模式是一种常见的设计模式，在计算机系统中，线程池、缓存、日志对象、对话框、打印机、数据库操作、显卡的驱动程序常被设计成单例。
单例模式分3种：懒汉式单例、饿汉式单例、登记式单例。
单例模式有以下3个特点：
1．只能有一个实例。
2．必须自行创建这个实例。
3．必须给其他对象提供这一实例。
那么为什么要使用PHP单例模式？
PHP一个主要应用场合就是应用程序与数据库打交道的场景，在一个应用中会存在大量的数据库操作，针对数据库句柄连接数据库的行为，使用单例模式可以避免大量的new操作。因为每一次new操作都会消耗系统和内存的资源。

的确global可以解决问题，也起到单例模式的作用，但在OOP中，我们拒绝这种编码。因为global存在安全隐患（全局变量不受保护的本质）。
全局变量是面向对象程序员遇到的引发BUG的主要原因之一。这是因为全局变量将类捆绑于特定的环境，破坏了封装。如果新的应用程序无法保证一开始就定义了相同的全局变量，那么一个依赖于全局变量的类就无法从一个应用程序中提取出来并应用到新应用程序中。
确切的讲，单例模式恰恰是对全局变量的一种改进，避免那些存储唯一实例的全局变量污染命名空间。你无法用错误类型的数据覆写一个单例。这种保护在不支持命名空间的PHP版本里尤其重要。因为在PHP中命名冲突会在编译时被捕获，并使脚本停止运行。

全局变量危害小结

长期占用内存
全局变量生命周期长，程序运行期一直存在，始终占有那块存储区；
难以定位修改
全局变量是公共的，全部函数都可以访问，难以定位全局变量在哪里被修改，加大了调试的难度；
使函数理解
使用全局变量的函数，需要关注全局变量的值，增加了理解的难度，增加了耦合性；
初始化顺序
全局变量的初始化顺序不定，如果全局变量之间有依赖，有可能导致某些变量初始化失败呢，引起莫名其妙bug。
污染命名空间
全局变量会污染命名空间，在函数中局部变量会覆盖全局的值，会出现同一个变量名多个值的情况，造成困惑；
增加耦合性
修改全部变量会影响所有用到它的模块，不利于调试；
线程不安全


MySQL索引原理及慢查询优化
http://blog.jobbole.com/86594/
多线程中多全局变量的修改容易冲突，需要加锁；